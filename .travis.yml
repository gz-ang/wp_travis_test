dist: trusty

cache:
  apt: true
  directories:
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files

language: php

php:
    - 5.4
    - 5.5
    - 5.6
    - 7.0
    - 7.1
    - 7.2
    - 7.3
    - 7.4
    - "nightly"

env:
  # PHPCS `master`.
  - PHPCS_BRANCH="dev-master" LINT=1
  # Lowest supported release in the 3.x series with which WPCS is compatible.
  - PHPCS_BRANCH="3.5.0"

# Define the stages used.
# For non-PRs, only the sniff, ruleset and quicktest stages are run.
# For pull requests and merges, the full script is run (skipping quicktest).
# Note: for pull requests, "develop" should be the base branch name.
# See: https://docs.travis-ci.com/user/conditions-v1
stages:
  - name: sniff
  - name: quicktest

jobs:
  fast_finish: true
  include:
    #### SNIFF STAGE ####
    - stage: sniff
      php: 7.4
      env: PHPCS_BRANCH="dev-master"
      addons:
        apt:
          packages:
            - libxml2-utils
      script:
        # WordPress Coding Standards.
        # @link https://github.com/WordPress/WordPress-Coding-Standards
        # @link http://pear.php.net/package/PHP_CodeSniffer/
        - $(pwd)/vendor/bin/phpcs --runtime-set ignore_warnings_on_exit 1

        # Validate the xml files.
        # @link http://xmlsoft.org/xmllint.html
        # For the build to properly error when validating against a scheme, these each have to be in their own condition.
        - xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./*/ruleset.xml
        - xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./phpcs.xml.dist.sample

        # Check the code-style consistency of the xml files.
        - diff -B --tabsize=4 ./WordPress/ruleset.xml <(xmllint --format "./WordPress/ruleset.xml")
        - diff -B --tabsize=4 ./WordPress-Core/ruleset.xml <(xmllint --format "./WordPress-Core/ruleset.xml")
        - diff -B --tabsize=4 ./WordPress-Docs/ruleset.xml <(xmllint --format "./WordPress-Docs/ruleset.xml")
        - diff -B --tabsize=4 ./WordPress-Extra/ruleset.xml <(xmllint --format "./WordPress-Extra/ruleset.xml")
        - diff -B --tabsize=4 ./phpcs.xml.dist.sample <(xmllint --format "./phpcs.xml.dist.sample")

        # Validate the composer.json file.
        # @link https://getcomposer.org/doc/03-cli.md#validate
        - composer validate --no-check-all --strict

        # Check that the sniffs available are feature complete.
        # For now, just check that all sniffs have unit tests.
        # At a later stage the documentation check can be activated.
        - composer check-complete


    #### QUICK TEST STAGE ####
    # This is a much quicker test which only runs the unit tests and linting against the low/high
    # supported PHP/PHPCS combinations.
    - stage: quicktest
      php: 7.4
      env: PHPCS_BRANCH="dev-master" LINT=1
    - php: 7.3
      env: PHPCS_BRANCH="3.5.0"
    - php: 5.4
      env: PHPCS_BRANCH="dev-master" LINT=1
    - php: 5.4
      env: PHPCS_BRANCH="3.5.0"

   
  allow_failures:
    # Allow failures for unstable builds.
    - php: "nightly"
    - env: PHPCS_BRANCH="4.0.x-dev as 3.9.99"

before_install:
    # Speed up build time by disabling Xdebug.
    # https://johnblackbourn.com/reducing-travis-ci-build-times-for-wordpress-projects/
    # https://twitter.com/kelunik/status/954242454676475904
    - phpenv config-rm xdebug.ini || echo 'No xdebug config.'

    # On stable PHPCS versions, allow for PHP deprecation notices.
    # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
    - |
      if [[ "${TRAVIS_BUILD_STAGE_NAME^}" != "Sniff" && $PHPCS_BRANCH != "dev-master" ]]; then
        echo 'error_reporting = E_ALL & ~E_DEPRECATED' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
      fi

    - export XMLLINT_INDENT="	"

install:
    - |
      if [[ ${PHPCS_BRANCH:0:2} == "4." ]]; then
        # Set Composer up to download only PHPCS from source for PHPCS 4.x.
        # The source is needed to get the base testcase from PHPCS.
        composer config preferred-install.squizlabs/php_codesniffer source
      else
        composer config preferred-install.squizlabs/php_codesniffer auto
      fi
    - composer require squizlabs/php_codesniffer:"${PHPCS_BRANCH}" --no-update --no-suggest --no-scripts
    - |
      if [[ $TRAVIS_PHP_VERSION == "nightly" ]]; then
        # PHPUnit 7.x does not allow for installation on PHP 8, so ignore platform
        # requirements to get PHPUnit 7.x to install on nightly.
        composer install --ignore-platform-reqs --no-suggest
      else
        # Do a normal dev install in all other cases.
        composer install --no-suggest
      fi

script:
  # Lint the PHP files against parse errors.
  - if [[ "$LINT" == "1" ]]; then composer lint; fi

  # Run the unit tests.
  - composer run-tests
